service: greenbox

package:
  individually: true

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: us-east-1
  environemnt:
    SERVICE_ENV: ${self:service}-${opt:stage, self:provider.stage}
    REGION: ${opt:region, self:provider.region}
    # Need to replace with condition option
    CURRENT_ENV: ${opt:stage, self:provider.stage}
    LOGGING_LEVEL: debug
    NODE_ENV: ${opt:stage, self:provider.stage}

iamRoleStatements:
   - Effect: Allow
     Action:
       - "lambda:InvokeFunction"
     Resource: "*"
   - Effect: Allow
     Action:
       - dynamodb:Query
       - dynamodb:Scan
       - dynamodb:GetItem
       - dynamodb:PutItem
       - dynamodb:UpdateItem
       - dynamodb:DeleteItem
       - dynamodb:GetRecords
       - dynamodb:GetShardIterator
       - dynamodb:DescribeStream
       - dynamodb:ListStreams
     Resource:
       - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:service}-${opt:stage}-team"
      

functions:
  graphql:
    handler: index.handler
    events:
      - http:
          path: graphql
          method: post
          cors: true
  
  playground:
    handler: index.playgroundHandler
    environment:
      GRAPHQL_URL: 'https://7xcy6m2dsc.execute-api.us-east-1.amazonaws.com/dev/graphql'
    timeout: 30
    events:
      - http:
          path: playground
          method: get
          cors: true


resources:
  Resources:
    teamTable: # name of the resource to be use later
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${opt:stage, self:provider.stage}-team # name of the table
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id # partition key
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

custom:
  graphqlUrl:  'https://7xcy6m2dsc.execute-api.us-east-1.amazonaws.com/dev/graphql'
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules:
      packagePath: ./package.json
      forceExclude:
        - aws-sdk
  dynamodb:
   stages:
     - dev
   start:
     migrate: true
     inMemory: true
     # noStart: true
  appsync-offline: # appsync-offline configuration
    port: 62222
    dynamodb:
      client:
        endpoint: "http://localhost:8000"
  appSync: # appsync plugin configuration
    name: greenbox-appsync
    authenticationType: API_KEY # use API_KEY
    logConfig:
      level: ALL
    dataSources:
      - type: AMAZON_DYNAMODB
        name: teamDataSource # name of the resource
        config:
          tableName: ${self:service}-${opt:stage, self:provider.stage}-team # name of DynamoDB table
    mappingTemplatesLocation: graphql/public/mapping-template
    mappingTemplates:
      - dataSource: teamDataSource
        type: Query
        field: listTeam # from the query in schema.graphql
        request: "team/get/teams-request.vtl"
        response: "team/get/teams-response.vtl"
      - dataSource: teamDataSource
        type: Query
        field: teamById # from the query in schema.graphql
        request: "team/get/team-request.vtl"
        response: "team/get/team-response.vtl"
      - dataSource: teamDataSource
        type: Mutation
        field: createTeam
        request: "team/put/team-request.vtl"
        response: "team/put/team-response.vtl"
    schema: graphql/public/schema.graphql
plugins:
  - serverless-pseudo-parameters
  - serverless-appsync-plugin
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline
